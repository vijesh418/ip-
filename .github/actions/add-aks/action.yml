name: 'Add IP to AKS Clusters'
description: 'Whitelist IP address in Azure AKS Clusters'

inputs:
  user_ip:
    description: 'Public IP address to whitelist'
    required: true
  resource_group:
    description: 'Azure Resource Group name'
    required: true
  cluster_name:
    description: 'AKS Cluster Name'
    required: true
  azure_credentials:
    description: 'Azure service principal credentials JSON'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ inputs.azure_credentials }}

    - name: Add IP to AKS Clusters
      shell: bash
      run: |
        RESOURCE_GROUP="${{ inputs.resource_group }}"
        USER_IP="${{ inputs.user_ip }}"
        CLUSTER_NAME="${{ inputs.cluster_name }}"
        
        # Validate inputs
        if [ -z "$CLUSTER_NAME" ]; then
          echo "Error: AKS cluster name is required"
          exit 1
        fi
        
        # Validate IP format and ranges
        if ! echo "$USER_IP" | grep -E '^([0-9]{1,3}\.){3}[0-9]{1,3}$' > /dev/null; then
          echo "Error: Invalid IP address format: $USER_IP"
          exit 1
        fi
        
        # Validate IP octets are within valid range (0-255)
        IFS='.' read -ra OCTETS <<< "$USER_IP"
        for octet in "${OCTETS[@]}"; do
          if [ "$octet" -gt 255 ] 2>/dev/null || [ "$octet" -lt 0 ] 2>/dev/null; then
            echo "Error: IP address octet out of range (0-255): $USER_IP"
            exit 1
          fi
          # Check if octet is numeric
          if ! [[ "$octet" =~ ^[0-9]+$ ]]; then
            echo "Error: IP address contains non-numeric octet: $USER_IP"
            exit 1
          fi
        done
        
        # Check if resource group exists
        if ! az group show --name "$RESOURCE_GROUP" >/dev/null 2>&1; then
          echo "Resource group $RESOURCE_GROUP not found"
          exit 1
        fi
        
        # Check if AKS cluster exists
        if ! az aks show --resource-group "$RESOURCE_GROUP" --name "$CLUSTER_NAME" >/dev/null 2>&1; then
          echo "AKS cluster $CLUSTER_NAME not found in resource group $RESOURCE_GROUP"
          exit 1
        fi
        
        echo "Adding IP $USER_IP to AKS Cluster: $CLUSTER_NAME"
        
        # Get current authorized IP ranges
        CURRENT_IPS=$(az aks show --resource-group "$RESOURCE_GROUP" --name "$CLUSTER_NAME" --query "apiServerAccessProfile.authorizedIpRanges" -o tsv 2>/dev/null | tr '\n' ',' | sed 's/,$//' || echo "")
        
        # Check if IP already exists (handle both with and without /32 suffix)
        if [ -n "$CURRENT_IPS" ] && (echo "$CURRENT_IPS" | grep -q "$USER_IP/32" || echo "$CURRENT_IPS" | grep -q "$USER_IP," || echo "$CURRENT_IPS" | grep -q ",$USER_IP$" || [ "$CURRENT_IPS" = "$USER_IP" ]); then
          echo "Error: IP $USER_IP already exists in AKS $CLUSTER_NAME"
          exit 1
        fi
        
        # Add the new IP
        if [ -z "$CURRENT_IPS" ]; then
          NEW_IPS="$USER_IP/32"
        else
          NEW_IPS="${CURRENT_IPS},$USER_IP/32"
        fi
        
        if az aks update --resource-group "$RESOURCE_GROUP" --name "$CLUSTER_NAME" --api-server-authorized-ip-ranges "$NEW_IPS"; then
          echo "Successfully added IP $USER_IP to AKS cluster $CLUSTER_NAME"
        else
          echo "Failed to update IP ranges for AKS cluster $CLUSTER_NAME"
          exit 1
        fi